% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/param_search.R
\name{exhaustive_search}
\alias{exhaustive_search}
\title{Exhaustive search}
\usage{
exhaustive_search(attributes, fun, data, subsetsSizes = length(attributes),
  singleAttr = FALSE, keepAll = TRUE, allowParallel = TRUE,
  randomSubsetsNumber = 0, ...)
}
\arguments{
\item{attributes}{character vector with attributes names}

\item{fun}{function to evaluate. See Details.}

\item{data}{data set for fun function.}

\item{subsetsSizes}{sizes of attributes subsets.}

\item{singleAttr}{singleAttr}

\item{keepAll}{keepAll}

\item{allowParallel}{allowParallel,}

\item{randomSubsetsNumber}{number of random subsets. Used only if greater than zero.}

\item{\dots}{other arguments passed to foreach}
}
\description{
The algorithm for searching atrribute subset space.
}
\examples{


### enable parallelization in examples

 library(doParallel)
 cl = makeCluster(2)
 registerDoParallel(cl)
# close at the end
# stopCluster(cl)
# registerDoSEQ()

####################################
## 1) evaluator from FSelector package
####################################
evaluator = function(subset, data)
{
  library(rpart)
  k <- 5
  splits <- runif(nrow(data))
  results = sapply(1:k, function(i) {
  test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
  train.idx <- !test.idx
  test <- data[test.idx, , drop=FALSE]
  train <- data[train.idx, , drop=FALSE]
  tree <- rpart(to_formula(subset, "Species"), train)
  error.rate = sum(test$Species != predict(tree, test, type="c")) / nrow(test)
  return(1 - error.rate)
   })
  return(mean(results))
}


 system.time(exhaustive_search(names(iris)[-5], evaluator, iris))
 system.time(exhaustive_search(names(iris)[-5],
                               evaluator,
                               iris,
                               allowParallel = FALSE))
 system.time(exhaustive_search(names(iris)[-5],
                               evaluator,
                               iris,
                               allowParallel = FALSE,
                               randomSubsetsNumber = 5))



################################
## 2) maximize R^2 statistics in
## the linear regression model/problem
################################

evaluator_R2_lm = function(attributes, data, dependent = names(iris)[1])
{
  summary(
    lm(to_formula(attributes, dependent), data = data)
  )$r.squared
}


system.time(exhaustive_search(names(iris)[-1], fun = evaluator_R2_lm, data =iris))



##############################
## 3) optimize BIC crietion in
## generalized linear model
##
## Aim of Bayesian approach it to identify the
## model with the highest probability of being
## the true model. - Kuha 2004
##############################
utils::data(anorexia, package = "MASS")

evaluator_BIC_glm <- function(attributes, data, dependent = "Postwt")
{
  extractAIC(
    glm(to_formula(attributes, dependent),
        family = gaussian, data = data),
    k = log(nrow(data))
  )[2]
}

exhaustive_search(c("Prewt", "Treat", "offset(Prewt)"),
                  fun = evaluator_BIC_glm,
                  data = anorexia)

### close parallelization
stopCluster(cl)
registerDoSEQ()

}

